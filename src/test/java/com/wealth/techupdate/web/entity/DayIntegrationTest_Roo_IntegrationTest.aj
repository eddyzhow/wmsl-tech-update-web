// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.wealth.techupdate.web.entity;

import com.wealth.techupdate.web.entity.DayDataOnDemand;
import com.wealth.techupdate.web.entity.DayIntegrationTest;
import com.wealth.techupdate.web.repository.DayRepository;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect DayIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DayIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DayIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private DayDataOnDemand DayIntegrationTest.dod;
    
    @Autowired
    DayRepository DayIntegrationTest.dayRepository;
    
    @Test
    public void DayIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", dod.getRandomDay());
        long count = dayRepository.count();
        Assert.assertTrue("Counter for 'Day' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DayIntegrationTest.testFind() {
        Day obj = dod.getRandomDay();
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Day' failed to provide an identifier", id);
        obj = dayRepository.findOne(id);
        Assert.assertNotNull("Find method for 'Day' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Day' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void DayIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", dod.getRandomDay());
        long count = dayRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'Day', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Day> result = dayRepository.findAll();
        Assert.assertNotNull("Find all method for 'Day' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Day' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DayIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", dod.getRandomDay());
        long count = dayRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Day> result = dayRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'Day' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Day' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DayIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", dod.getRandomDay());
        Day obj = dod.getNewTransientDay(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Day' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Day' identifier to be null", obj.getId());
        dayRepository.save(obj);
        Assert.assertNotNull("Expected 'Day' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void DayIntegrationTest.testDelete() {
        Day obj = dod.getRandomDay();
        Assert.assertNotNull("Data on demand for 'Day' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Day' failed to provide an identifier", id);
        obj = dayRepository.findOne(id);
        dayRepository.delete(obj);
        Assert.assertNull("Failed to remove 'Day' with identifier '" + id + "'", dayRepository.findOne(id));
    }
    
}
